{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Documents\\\\PortfolioPage\\\\src\\\\components\\\\LastCommitTimer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LastCommitTimer() {\n  _s();\n  const [lastCommitTime, setLastCommitTime] = useState(null);\n  useEffect(() => {\n    const fetchLastCommitTime = async () => {\n      try {\n        const response = await axios.get('https://api.github.com/repos/jonathan5150/PortfolioPage/commits?per_page=1');\n        const lastCommit = response.data[0].commit.author.date;\n        setLastCommitTime(new Date(lastCommit));\n      } catch (error) {\n        console.error('Error fetching last commit time:', error);\n      }\n    };\n    fetchLastCommitTime();\n    const interval = setInterval(fetchLastCommitTime, 60000); // Update every minute\n\n    return () => clearInterval(interval);\n  }, []);\n  const formatDate = date => {\n    const options = {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true,\n      timeZoneName: 'short'\n    };\n    let dateTimeString = date.toLocaleString('en-US', options);\n    const [datePart, timePart] = dateTimeString.split(', ');\n    return `${datePart} @ ${timePart}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Last Updated: \", lastCommitTime ? formatDate(lastCommitTime) : 'Fetching...']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(LastCommitTimer, \"hbndmB3VsVHWx87r/Si7f7qmuT4=\");\n_c = LastCommitTimer;\nexport default LastCommitTimer;\nvar _c;\n$RefreshReg$(_c, \"LastCommitTimer\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","LastCommitTimer","_s","lastCommitTime","setLastCommitTime","fetchLastCommitTime","response","get","lastCommit","data","commit","author","date","Date","error","console","interval","setInterval","clearInterval","formatDate","options","year","month","day","hour","minute","hour12","timeZoneName","dateTimeString","toLocaleString","datePart","timePart","split","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jonathan/Documents/PortfolioPage/src/components/LastCommitTimer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction LastCommitTimer() {\r\n  const [lastCommitTime, setLastCommitTime] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchLastCommitTime = async () => {\r\n      try {\r\n        const response = await axios.get('https://api.github.com/repos/jonathan5150/PortfolioPage/commits?per_page=1');\r\n        const lastCommit = response.data[0].commit.author.date;\r\n        setLastCommitTime(new Date(lastCommit));\r\n      } catch (error) {\r\n        console.error('Error fetching last commit time:', error);\r\n      }\r\n    };\r\n\r\n    fetchLastCommitTime();\r\n\r\n    const interval = setInterval(fetchLastCommitTime, 60000); // Update every minute\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const formatDate = (date) => {\r\n    const options = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true, timeZoneName: 'short' };\r\n    let dateTimeString = date.toLocaleString('en-US', options);\r\n    const [datePart, timePart] = dateTimeString.split(', ');\r\n    return `${datePart} @ ${timePart}`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      Last Updated: {lastCommitTime ? formatDate(lastCommitTime) : 'Fetching...'}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LastCommitTimer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE1DC,SAAS,CAAC,MAAM;IACd,MAAMQ,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,4EAA4E,CAAC;QAC9G,MAAMC,UAAU,GAAGF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,MAAM,CAACC,IAAI;QACtDR,iBAAiB,CAAC,IAAIS,IAAI,CAACL,UAAU,CAAC,CAAC;MACzC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IAEDT,mBAAmB,CAAC,CAAC;IAErB,MAAMW,QAAQ,GAAGC,WAAW,CAACZ,mBAAmB,EAAE,KAAK,CAAC,CAAC,CAAC;;IAE1D,OAAO,MAAMa,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,UAAU,GAAIP,IAAI,IAAK;IAC3B,MAAMQ,OAAO,GAAG;MAAEC,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAE,SAAS;MAAEC,GAAG,EAAE,SAAS;MAAEC,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE,SAAS;MAAEC,MAAM,EAAE,IAAI;MAAEC,YAAY,EAAE;IAAQ,CAAC;IAC9I,IAAIC,cAAc,GAAGhB,IAAI,CAACiB,cAAc,CAAC,OAAO,EAAET,OAAO,CAAC;IAC1D,MAAM,CAACU,QAAQ,EAAEC,QAAQ,CAAC,GAAGH,cAAc,CAACI,KAAK,CAAC,IAAI,CAAC;IACvD,OAAQ,GAAEF,QAAS,MAAKC,QAAS,EAAC;EACpC,CAAC;EAED,oBACE/B,OAAA;IAAAiC,QAAA,GAAK,gBACW,EAAC9B,cAAc,GAAGgB,UAAU,CAAChB,cAAc,CAAC,GAAG,aAAa;EAAA;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvE,CAAC;AAEV;AAACnC,EAAA,CAjCQD,eAAe;AAAAqC,EAAA,GAAfrC,eAAe;AAmCxB,eAAeA,eAAe;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}